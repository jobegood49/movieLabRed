import { Request, RequestInit, Response, BodyInit, Headers, URL, URLSearchParams, URLSearchParamsInit } from 'apollo-server-env';
import { HTTPCache } from './HTTPCache';
export declare type RequestOptions = RequestInit & {
    path: string;
    params: URLSearchParams;
    headers: Headers;
    body?: Body;
};
export declare type Body = BodyInit | object;
export { Request };
declare type ValueOrPromise<T> = T | Promise<T>;
export declare abstract class RESTDataSource<TContext = any> {
    httpCache: HTTPCache;
    context: TContext;
    baseURL?: string;
    protected willSendRequest?(request: RequestOptions): ValueOrPromise<void>;
    protected resolveURL(request: RequestOptions): ValueOrPromise<URL>;
    protected didReceiveErrorResponse<TResult = any>(response: Response): Promise<TResult>;
    protected get<TResult = any>(path: string, params?: URLSearchParamsInit, init?: RequestInit): Promise<TResult>;
    protected post<TResult = any>(path: string, body?: Body, init?: RequestInit): Promise<TResult>;
    protected patch<TResult = any>(path: string, body?: Body, init?: RequestInit): Promise<TResult>;
    protected put<TResult = any>(path: string, body?: Body, init?: RequestInit): Promise<TResult>;
    protected delete<TResult = any>(path: string, params?: URLSearchParamsInit, init?: RequestInit): Promise<TResult>;
    private fetch;
    private trace;
}
//# sourceMappingURL=RESTDataSource.d.ts.map