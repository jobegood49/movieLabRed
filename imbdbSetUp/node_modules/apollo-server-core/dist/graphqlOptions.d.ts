import { GraphQLSchema, ValidationContext, GraphQLFieldResolver } from 'graphql';
import { HttpHeaderCalculation } from './caching';
import { GraphQLExtension } from 'graphql-extensions';
import { CacheControlExtensionOptions } from 'apollo-cache-control';
import { KeyValueCache } from 'apollo-server-caching';
export interface GraphQLServerOptions<TContext = (() => Promise<Record<string, any>> | Record<string, any>) | Record<string, any>> {
    schema: GraphQLSchema;
    formatError?: Function;
    rootValue?: any;
    context?: TContext;
    formatParams?: Function;
    validationRules?: Array<(context: ValidationContext) => any>;
    formatResponse?: Function;
    fieldResolver?: GraphQLFieldResolver<any, TContext>;
    debug?: boolean;
    tracing?: boolean;
    cacheControl?: boolean | (CacheControlExtensionOptions & {
        calculateHttpHeaders?: boolean | HttpHeaderCalculation;
        stripFormattedExtensions?: boolean;
    });
    extensions?: Array<() => GraphQLExtension>;
    dataSources?: () => DataSources<TContext>;
    cache?: KeyValueCache;
    persistedQueries?: PersistedQueryOptions;
}
export interface DataSource<TContext> {
    context: TContext;
}
export declare type DataSources<TContext> = {
    [name: string]: DataSource<TContext>;
};
export interface PersistedQueryOptions {
    cache: KeyValueCache;
}
export default GraphQLServerOptions;
export declare function resolveGraphqlOptions(options: GraphQLServerOptions | ((...args: Array<any>) => Promise<GraphQLServerOptions> | GraphQLServerOptions), ...args: Array<any>): Promise<GraphQLServerOptions>;
//# sourceMappingURL=graphqlOptions.d.ts.map